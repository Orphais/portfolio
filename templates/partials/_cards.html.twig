{% block style_cards %}
	<style>
		.hover-card {
			transition: background-color 0.3s ease, transform 0.2s ease;
		}

		.hover-card:hover {
			background-color: #f8f9fa;
			transform: scale(1.02);
			cursor: pointer;
		}

		.share-icon {
			cursor: pointer;
			color: #007bff;
			font-size: 1.5rem;
			margin-left: 10px;
		}

		.copied-message {
			color: green;
			font-size: 0.9rem;
			display: none;
		}

		.copied-message.active {
			display: inline-block;
		}

		.modal-dialog {
			max-width: 70%;
			width: auto;
			max-height: 105vh;
		}

		.modal-body {
			max-height: 85vh;
			overflow-y: auto;
		}

		.comment {
			display: flex;
			align-items: center;
			justify-content: flex-start;
			padding-left: 20px;
			height: 3em;
			width: 100%;
			border-radius: 50px;
			background-color: white;
			color: black;
			font-size: 1.2em;
			text-align: left;
			cursor: pointer;
			box-sizing: border-box;
		}

		.row {
			position: relative;
		}

		.col {
			position: absolute;
			transition: all 0.3s ease;
		}
	</style>
{% endblock %}

{% block content_cards %}
	<div class="row row-cols-1 row-cols-md-3 g-4 mx-4">
		{% for creation in creations %}
			<div class="col">
				<div class="card h-100 hover-card" style="border-radius: 30px;">
					<img src="/images/{{ creation.image[0] }}" class="card-img-top" style="border-radius: 30px 30px 0 0;" alt="{{ creation.name }}" data-bs-toggle="modal" data-bs-target="#creationModal-{{ creation.id }}">
					<div class="card-body">
						<h5 class="card-title">{{ creation.name }}</h5>
					</div>
					<div class="card-footer text-end">
						<div class="like share">
							<a href="{{ path('creation.like', { 'id': creation.id }) }}" class="btn btn-link js-like">
								{% if app.user and creation.isLikedByUser(app.user) %}
									<i class="fas fa-thumbs-up"></i>
								{% else %}
									<i class="far fa-thumbs-up"></i>
								{% endif %}
								<span class="js-likes">{{ creation.likes | length }}</span>
							</a>
							<a href="#" class="btn btn-link js-comment" data-bs-toggle="modal" data-bs-target="#creationModal-{{ creation.id }}">
								<i class="fas fa-comments"></i>
								<span class="js-comments">{{ creation.comments | length }}</span>
							</a>
							<span class="share-icon" data-share-url="{{ path('creation_show', {'id': creation.id}) }}" title="Partager">
								<i class="fas fa-share"></i>
							</span>
							<span class="copied-message">Lien copié !</span>
						</div>
					</div>
				</div>
			</div>

			<div class="modal fade" id="creationModal-{{ creation.id }}" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
				<div class="modal-dialog">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title">{{ creation.name }}</h5>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body">
							{% block carroussel %}
								{% include "partials/_carroussel.html.twig" %}
							{% endblock %}

							<p>
								<strong>Description :</strong>
								{{ creation.description }}</p>

							<h3>Outils utilisés :</h3>
							<ul>
								{% for tool in creation.Tool %}
									<li>{{ tool.name }}</li>
								{% endfor %}
							</ul>

							<h3>Catégories :</h3>
							<ul>
								{% for category in creation.category %}
									<li>{{ category.name }}</li>
								{% endfor %}
							</ul>

							<h3>Commentaires :</h3>
							<div>
								{% if app.user %}
									{% if form is defined %}
										{{ form_start(form) }}
										{{ form_widget(form, {'attr': {'class': 'form-control'}}) }}
										<button class="btn btn-primary mt-3">Envoyer</button>
										{{ form_end(form) }}
									{% else %}
										<p class="text-warning">Le formulaire de commentaire n'est pas disponible.</p>
									{% endif %}
								{% else %}
									<p class="text-muted">Connectez-vous pour commenter.</p>
								{% endif %}
							</div>
							<div>
								{% for comment in creation.comments %}
									<div class="mb-3 p-3 border rounded">
										<p>
											<strong>{{ comment.user ? comment.user.getPseudo : 'Anonyme' }}</strong>
											:</p>
										<p>{{ comment.contentComment }}</p>
										<p class="text-muted">Posté le
											{{ comment.createdAt|date('d/m/Y') }}</p>
										{% if comment.user == app.user %}
											<form action="{{ path('comment_delete', { id: comment.id }) }}" method="post" class="mt-2 delete-comment-form" data-comment-id="{{ comment.id }}">
												<input type="hidden" name="_token" value="{{ csrf_token('delete' ~ comment.id) }}">
												<button type="submit" class="btn btn-danger btn-sm">Supprimer</button>
											</form>
										{% endif %}
									</div>
								{% else %}
									<p>Aucun commentaire pour cette création.</p>
								{% endfor %}
							</div>
						</div>
					</div>
				</div>
			</div>
		{% endfor %}
	</div>
{% endblock %}

{% block javascripts %}
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/axios@1.6.7/dist/axios.min.js"></script>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
const grid = document.querySelector('.row');
const cols = grid.querySelectorAll('.col');

function arrangeGrid() {
const gridWidth = grid.offsetWidth;
const colWidth = cols[0].offsetWidth;
const colsCount = Math.floor(gridWidth / colWidth);

const colHeights = new Array(colsCount).fill(0);

cols.forEach(col => {
const minColHeight = Math.min(... colHeights);
const colIndex = colHeights.indexOf(minColHeight);

const x = colIndex * colWidth;
const y = minColHeight;

col.style.position = 'absolute';
col.style.left = `${x}px`;
col.style.top = `${y}px`;

colHeights[colIndex] += col.offsetHeight + 16;
});

grid.style.position = 'relative';
grid.style.height = `${
Math.max(... colHeights)
}px`;
}

arrangeGrid();
window.addEventListener('resize', arrangeGrid);

document.querySelectorAll('.delete-comment-form').forEach(form => {
form.addEventListener('submit', function (event) {
event.preventDefault();

if (!confirm('Êtes-vous sûr de vouloir supprimer ce commentaire ?')) {
return;
}

const commentId = form.dataset.commentId;
const url = form.action;

fetch(url, {
method: 'POST',
headers: {
'X-Requested-With': 'XMLHttpRequest',
'Content-Type': 'application/x-www-form-urlencoded'
},
body: new URLSearchParams(new FormData(form))
}).then(response => {
if (response.ok) {
const commentElement = document.querySelector (`[data-comment-id="${commentId}"]`).closest('.mb-3');
commentElement.remove();

alert('Le commentaire a été supprimé avec succès !');
} else {
console.error('Erreur lors de la suppression du commentaire.');
alert('Une erreur est survenue lors de la suppression du commentaire.');
}
}).catch(error => {
console.error('Erreur réseau :', error);
alert('Erreur réseau. Veuillez réessayer.');
});
});
});

function onClickBtnLike(event) {
event.preventDefault();
const url = this.href;
const spanCount = this.querySelector('span.js-likes');
const icone = this.querySelector('i');

axios.get(url).then(function (response) {
spanCount.textContent = response.data.likes;

if (icone.classList.contains('fas')) {
icone.classList.replace('fas', 'far');
} else {
icone.classList.replace('far', 'fas');
}
}).catch(function (error) {
if (error.response.status === 403) {
window.alert('Vous ne pouvez pas liker une création si vous n\'êtes pas connecté !');
} else {
window.alert("Une erreur s'est produite");
}
});
}

document.querySelectorAll('a.js-like').forEach(function (link) {
link.addEventListener('click', onClickBtnLike);
});

const shareIcons = document.querySelectorAll('.share-icon');
shareIcons.forEach(icon => {
icon.addEventListener('click', function (event) {
event.stopPropagation();

const relativeUrl = this.getAttribute('data-share-url');
const fullUrl = `${
window.location.origin
}${relativeUrl}`;

navigator.clipboard.writeText(fullUrl).then(() => {
const message = this.nextElementSibling;
message.classList.add('active');
setTimeout(() => message.classList.remove('active'), 2000);
}).catch(err => console.error('Erreur lors de la copie du lien :', err));
});
});

document.querySelectorAll('.modal').forEach(modal => {
modal.addEventListener('hidden.bs.modal', function () {
document.body.classList.remove('modal-open');
document.querySelector('.modal-backdrop') ?. remove();
});
});
});
	</script>
{% endblock %}
